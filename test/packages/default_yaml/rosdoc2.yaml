## Default configuration, generated by rosdoc2.

## This 'attic section' self-documents this file's type and version.
type: 'rosdoc2 config'
version: 1

---

settings: {
    ## This setting is relevant mostly if the standard Python package layout cannot
    ## be assumed for 'sphinx-apidoc' invocation. The user can provide the path
    ## (relative to the 'package.xml' file) where the Python modules defined by this
    ## package are located.
    python_source: 'default_yaml',

    ## This setting, if true, attempts to run `doxygen` and the `breathe`/`exhale`
    ## extensions to `sphinx` regardless of build type. This is most useful if the
    ## user would like to generate C/C++ API documentation for a package that is not
    ## of the `ament_cmake/cmake` build type.
    always_run_doxygen: false,

    ## This setting, if true, will skip running doxygen` and the `breathe`/`exhale`
    ## extensions to `sphinx` regardless of build type. This is most useful if the
    ## user has generated C++ documentation elsewhere that is included in the doc
    ## folder, or in external documentation.
    never_run_doxygen: false,

    ## This setting, if true, attempts to run `sphinx-apidoc` regardless of build
    ## type. This is most useful if the user would like to generate Python API
    ## documentation for a package that is not of the `ament_python` build type.
    always_run_sphinx_apidoc: false,

    ## This setting, if true, will skip running `sphinx-apidoc` regardless of build
    ## type. This is most useful if the user has generated python documentation elsewhere
    ## that is included in the doc folder, or in external documentation.
    never_run_sphinx_apidoc: false,

    ## This setting, if provided, will override the build_type of this package
    ## for documentation purposes only. If not provided, documentation will be
    ## generated assuming the build_type in package.xml.
    override_build_type: 'ament_cmake',
}
builders:
    ## Each stanza represents a separate build step, performed by a specific 'builder'.
    ## The key of each stanza is the builder to use; this must be one of the
    ## available builders.
    ## The value of each stanza is a dictionary of settings for the builder that
    ## outputs to that directory.
    ## Keys in all settings dictionary are:
    ##  * 'output_dir' - determines output subdirectory for builder instance
    ##                   relative to --output-directory
    ##  * 'name' - used when referencing the built docs from the index.

    - doxygen: {
        name: 'default_yaml Public C/C++ API',
        output_dir: 'generated/doxygen',
        ## file name for a user-supplied Doxyfile
        doxyfile: null,
        ## additional statements to add to the Doxyfile, list of strings
        extra_doxyfile_statements: [],
      }
    - sphinx: {
        name: 'default_yaml',
        ## This path is relative to output staging.
        doxygen_xml_directory: 'generated/doxygen/xml',
        output_dir: '',
        ## If sphinx_sourcedir is specified and not null, then the documentation in that folder
        ## (specified relative to the package.xml directory) will replace rosdoc2's normal output.
        ## If sphinx_sourcedir is left unspecified, any documentation found in the doc/ or
        ## doc/source/ folder will still be included by default, along with other relevant package
        ## information.
        sphinx_sourcedir: null,
        ## Directory (relative to the package.xml directory) where user documentation is found. If
        ## documentation is in one of the standard locations (doc/ or doc/source) this is not
        ## needed. Unlike sphinx_sourcedir, specifying this does not override the standard rosdoc2
        ## output, but includes this user documentation along with other items included by default
        ## by rosdoc2.
        user_doc_dir: 'doc'
      }
